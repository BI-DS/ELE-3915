[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Excel Programming and Automation",
    "section": "",
    "text": "Introduction\nWelcome to the course ELE 3915 Excel Programming and Automation. You’re about to get your hands dirty! This course is about being able to do cool things Excel and TypeScript. It should give you the confidence to assert that you can program in Excel. And it gives you an introduction to TypeScript, a popular general-purpose programming language used in Microsoft Office on the web. The slides can be found on Github, in the slides directory.\nIf you need to get in contact with me, please send an e-mail to jonas.moss@bi.no. I do not check It’s learning often."
  },
  {
    "objectID": "index.html#rough-structure",
    "href": "index.html#rough-structure",
    "title": "Excel Programming and Automation",
    "section": "Rough structure",
    "text": "Rough structure\nThe course is split into into four parts.\n\nLecture 1–3. Basic Excel usage, including formulas such as SUM ,COUNTIFS, INDEX, and MATCH. We focus on general mathematical formulas and data manipulation, in addition to simple formatting. Roughly speaking, these lectures cover the sort of Excel you should expect to see in lecacy Excel sheets. Most of the curriculum is covered on the excellent webpage ExcelJet.\nLecture 4–6. These lectures covers modern Excel formulas using dynamic arrays, LAMBDA and LET. Many of these features are just a couple of years old (as of 2023). I would not expect most employers to know about them. These features can do quite a bit of what Visual Basic for Applications (VBA) did in legacy worksheets. Programming using LAMBDA and LET is difficult, so make sure you take the exercises seriously. Again, most of the curriculum is covered on ExcelJet.\nLecture 7–9. Covers power query, power pivot, and DAX. These are modern tools for data visualization, data cleaning, and data manipulation. These tools are likely to form the core of your automation in Excel. They are widely regarded as the most important tools in the Excel analysts toolbox.\nLecture 10–14. These lectures contain an introduction to TypeScript and its application in Excel. Take note that we assume no previous exposure to programming in this course. TypeScript is a typed modification of JavaScript, the dominant language in web development, and has application far beyond Excel. The lectures will focus on programming in TypeScript in general, and the emphasis is on exercises."
  },
  {
    "objectID": "index.html#a-note-on-difficulty",
    "href": "index.html#a-note-on-difficulty",
    "title": "Excel Programming and Automation",
    "section": "A note on difficulty",
    "text": "A note on difficulty\nMost of the course is about programming. Students often find programming hard. Don’t expect to be able solve every exercise in 5 minutes! Solving programming exercises often take a long time, and you need to persevere.\nBe aware that the difficulty of this course is uneven. For instance, lectures on LAMBDA and LET are harder than the first three lectures, and the lectures on power query are likely to be easier. Do not think this course will be a walk in the park.\nTo become a decent programmer it’s a good idea to\n\nDo a lot of exercises.\nSpend at least 20 minutes on each exercise before you give up. You need to think really hard. Don’t expect to be able to solve the problem without making an effort.\nDo the exercise yourself after you have looked at the solution! Close the window and do it from memory. It’s also a good idea to revisit the same exercise later on, e.g. the next day, to make sure you’re able to do it.\nTinker around, either modifying exercises yourself, or with your own ideas. If your tinkering leads to something cool, tell me! Use Kaggle to download data sets to tinker with and Mockaroo to generate fake but plausible-looking data sets.\n\nDo not to spend an inordinate amount of time on an exercise before you check the solution. If you have spent 1 hour on an exercise and haven’t gotten anywhere, it might be smart save yourself some time and look at the solution.\nMoreover, be aware that programming is often extremely frustrating. It’s like talking to someone who just simply refuses to understand what you’re saying, no matter how many times you repeat yourself. It’s normal and expected to feel frustrated!\nThere are many tips online about learning to program, e.g., this collection of tips. But it mostly boils down to spending a lot of time solving problems."
  },
  {
    "objectID": "index.html#about-this-site",
    "href": "index.html#about-this-site",
    "title": "Excel Programming and Automation",
    "section": "About this site",
    "text": "About this site\nCurious how this site was made? It is written using Quarto books."
  },
  {
    "objectID": "01-excelbasics-i.html#curriculum",
    "href": "01-excelbasics-i.html#curriculum",
    "title": "1  Excel basics (i): Introduction to formulas",
    "section": "1.1 Curriculum",
    "text": "1.1 Curriculum\n\nBasics of Excel, including cells, active cells, and ranges. Worksheets, basic formatting, data types and blank cells.\nUnderstanding what formulas and functions are, including copying of formulas using relative references.\nReading the signature and short documentation of functions inside Excel.\nUsing flash fill.\nUsing the operators +,-,/, and *.\nA couple of keyboard shortcuts.\n\nPress F2 to edit a cell and see its dependencies.\nPress escape to exit editing a formula.\nPress tab to auto-complete a formula.\nPress SHIFT to add contiguous cells to a selection.\nPress CTRL+DOWN to go to the last non-blank cell in a contiguous column. And CTRL+UP to go to the first column-wise, CTRL+LEFT-ARROW to go to the first row-wise, and CTRL+RIGHT-ARROW to go to the last row-wise.\nHold CTRL to add cells to a selection.\nPress F4 to taggle absolute references.\n\nLogical values; the functions AND, OR, NOT, and the operators =, <, >, <= and >=.\nOverview of error messages.\nKnowledge of the basic datatypes of Excel (number; text; logical; error; array), including how to use the TYPE function.\n\nBasic functions using one range as argument.\n\n\n\nName\nDescription\n\n\n\n\nSUM\nSum all numbers in a range.\n\n\nPRODUCT\nThe product of all numbers in a range.\n\n\nMAX\nThe maximum of numbers in a range.\n\n\nMIN\nThe minimum of numbers in a range.\n\n\nCOUNT/COUNTA/COUNTBLANK\nCount the number of cells in a range that contain numbers (COUNT), are non-empty (COUNTA), or empty (COUNTBLANK).\n\n\nROWS / COLS\nCounts the number of rows / columns in a reference.\n\n\nAVERAGE\nThe average of the numbers in a range. Empty cells are ignored.\n\n\nMEDIAN\nThe median of the numbers in a range.\n\n\nSTDEV\nThe standard deviation of the numbers in a range. Empty cells are ignored.\n\n\nCOUNTIF\nCounts cells satisfying a criterion."
  },
  {
    "objectID": "01-excelbasics-i.html#slides-and-sheets-used-in-the-lecture",
    "href": "01-excelbasics-i.html#slides-and-sheets-used-in-the-lecture",
    "title": "1  Excel basics (i): Introduction to formulas",
    "section": "1.2 Slides and sheets used in the lecture",
    "text": "1.2 Slides and sheets used in the lecture\n\nRemember to look at the solutions only after giving the exercises a serious attempt. Solve the exercises yourself after looking at the solution.\n\nThe lecture slides are here. The Excel sheets used in the lecture, before being filled in, here. The lecture notes after being filled in are here.\nHere are the exercises; the solutions can be found here."
  },
  {
    "objectID": "01-excelbasics-i.html#recommended-resources",
    "href": "01-excelbasics-i.html#recommended-resources",
    "title": "1  Excel basics (i): Introduction to formulas",
    "section": "1.3 Recommended resources",
    "text": "1.3 Recommended resources\nThere are many excellent video resources for Excel online. The content of this lecture is pretty standard stuff, and there are probably 100s of Youtube videoes covering essentially the same content. For instance, the formulas covered in this lecture are also covered by Kevin Stratvert here, but he goes a little further, covering harder formulas too. Leila Gharani introduces formulas here.\nThere are many introductions to flash fill too, e.g. this one.\nThe site Excel Exercises provides some decent exercises, but goes beyond the content of this lecture.\nThere is a staggering number of shortcuts in Excel, see e.g. here. It’s easy to get overwhelmed by shortcuts, so make sure you don’t try to learn too many at once though!"
  },
  {
    "objectID": "02-excelbasics-ii.html#curriculum",
    "href": "02-excelbasics-ii.html#curriculum",
    "title": "2  Excel basics (ii)",
    "section": "2.1 Curriculum",
    "text": "2.1 Curriculum\n\n2.1.1 Absolute and relative references.\n\nKnow the difference between absolute, mixed, and relative references and when to use which.\nUse F4 to cycle between the different kinds of references.\n\n\n\n2.1.2 Conditionals in Excel.\n\nConditional formulas\n\nIF function\nOldskool nested IF\nThe better IFS function\n\nThe SUMIF/SUMIFS; COUNTIF/COUNTIFS; MINIFS/MAXIFS functions.\n\n\n\n2.1.3 Working with text\n\nGet an overview of the text manipulation functions in Excel and how to apply them.\nBe able to solve basic text manipulation tasks.\nWorking with strings. Using & for concatenation and F9 for replacing formulas with values.\nNot all useful text manipulation tools are built-in though. For instance, WORDCOUNT, counting the number of words in a text, does not exist. We will revisit text manipulation later on.\nWe will revisit text manipulation later on.\nSome of the functions are oldskool. You might see them used, but modern alternatives are better.\n\nThis is arguably the case for LEFT; MID, and RIGHT, FIND and SEARCH.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nTRIM\nRemove extra spaces from text.\n\n\nTEXTBEFORE / TEXTAFTER\nExtract text before / after delimiter.\n\n\nEXACT\nCompare two text strings, taking case into account.\n\n\nSUBSTITUTE\nReplace text based on content.\n\n\nLOWER/UPPER\nTransform text to lower/upper case.\n\n\nPROPER\nCapitalize first letter of each word in text.\n\n\nCONCAT / TEXTJOIN\nJoin text values with(out) a delimiter.\n\n\nLEN\nGet the length of the text\n\n\nLEFT / MID / RIGHT\nExtract text from the left/middle/right of a string\n\n\nFIND\nGet location substring in a string.\n\n\nREPLACE\nReplace text based on location."
  },
  {
    "objectID": "02-excelbasics-ii.html#exercises",
    "href": "02-excelbasics-ii.html#exercises",
    "title": "2  Excel basics (ii)",
    "section": "2.2 Exercises",
    "text": "2.2 Exercises"
  },
  {
    "objectID": "02-excelbasics-ii.html#recommended-resources",
    "href": "02-excelbasics-ii.html#recommended-resources",
    "title": "2  Excel basics (ii)",
    "section": "2.3 Recommended resources",
    "text": "2.3 Recommended resources\nhttps://www.youtube.com/watch?v=thvE8Eg-Pqg&ab_channel=Chandoo"
  },
  {
    "objectID": "03-excelbasics-iii.html#curriculum",
    "href": "03-excelbasics-iii.html#curriculum",
    "title": "3  Excel basics (iii)",
    "section": "3.1 Curriculum",
    "text": "3.1 Curriculum\n\n3.1.1 Part 1\n\nData tables.\nData validation.\nConditional formatting.\nRounding of numbers: ROUND; FLOOR; CEILING; etc.\nRanking and ordering: RANK/RANKEQ function, the SMALL and LARGE functions.\nFunctions of multiple ranges: SUMPRODUCT.\n\n\n\n3.1.2 Part 2\n\nThe INDEX, ROWS, and COLUMNS functions.\nThe MATCH function;\nUsing INDEX together with MATCH.\nThe old school look up functions VLOOKUP, HLOOKUP, LOOKUP.\nThe modern look up function: XLOOKUP.\nThe modern match function: XMATCH."
  },
  {
    "objectID": "03-excelbasics-iii.html#exercises",
    "href": "03-excelbasics-iii.html#exercises",
    "title": "3  Excel basics (iii)",
    "section": "3.2 Exercises",
    "text": "3.2 Exercises"
  },
  {
    "objectID": "03-excelbasics-iii.html#recommended-resources",
    "href": "03-excelbasics-iii.html#recommended-resources",
    "title": "3  Excel basics (iii)",
    "section": "3.3 Recommended resources",
    "text": "3.3 Recommended resources"
  },
  {
    "objectID": "04-dynamic-arrays.html#curriculum",
    "href": "04-dynamic-arrays.html#curriculum",
    "title": "4  Lambdas and dynamic arrays",
    "section": "4.1 Curriculum",
    "text": "4.1 Curriculum\n\nHow to define your own functions using LAMBDA and why it is useful.\n\nIt makes readers of your code understand your intention. Including yourself in the future!\nFunctions makes it easier to do hard things, as you can split up complicated formulas into multiple parts.\n\nShort introduction to the Advanced Formula Environment\nWhat a dynamic array is and what the #SPILL! error means.\nSome important functions:\n\nFILTER\nSORT, SORTBY\nUNIQUE\nTEXTSPLIT"
  },
  {
    "objectID": "04-dynamic-arrays.html#exercises",
    "href": "04-dynamic-arrays.html#exercises",
    "title": "4  Lambdas and dynamic arrays",
    "section": "4.2 Exercises",
    "text": "4.2 Exercises"
  },
  {
    "objectID": "04-dynamic-arrays.html#recommended-resources",
    "href": "04-dynamic-arrays.html#recommended-resources",
    "title": "4  Lambdas and dynamic arrays",
    "section": "4.3 Recommended resources",
    "text": "4.3 Recommended resources"
  },
  {
    "objectID": "05-lambdas-let.html#curriculum",
    "href": "05-lambdas-let.html#curriculum",
    "title": "5  User-made functions with LAMBDA",
    "section": "5.1 Curriculum",
    "text": "5.1 Curriculum\nHere is an example of a complex function.\n=LET(\n    tab; FILTER(vgsales; (vgsales[Genre] = genre) * (vgsales[Platform] = platform));\n    rows; {7; 8; 9; 10};\n    regions; {\"NA\"; \"EU\"; \"JP\"; \"Other\"};\n    VSTACK(\n        HSTACK(\"\"; TRANSPOSE(Years));\n        HSTACK(\n            regions;\n            MAKEARRAY(\n                ROWS(rows);\n                ROWS(Years);\n                LAMBDA(row_index; year_index; \n                LET(\n                    row;index(rows;row_index);\n                    year;index(Years;year_index);\n                    IFERROR(SUM(FILTER(CHOOSECOLS(tab; row); CHOOSECOLS(tab; 4) = year)); 0))\n                )\n            )\n        )\n    )\n)"
  },
  {
    "objectID": "05-lambdas-let.html#exercises",
    "href": "05-lambdas-let.html#exercises",
    "title": "5  User-made functions with LAMBDA",
    "section": "5.2 Exercises",
    "text": "5.2 Exercises"
  },
  {
    "objectID": "05-lambdas-let.html#recommended-resources",
    "href": "05-lambdas-let.html#recommended-resources",
    "title": "5  User-made functions with LAMBDA",
    "section": "5.3 Recommended resources",
    "text": "5.3 Recommended resources"
  },
  {
    "objectID": "06-lambdas-and-let-ii.html#curriculum",
    "href": "06-lambdas-and-let-ii.html#curriculum",
    "title": "6  LET, LAMBDA, and dynamic arrays",
    "section": "6.1 Curriculum",
    "text": "6.1 Curriculum\nExcel is equipped with many functions for handling dynamic arrays and LAMBDA functions. The most important are FILTER, MAP (and its cousins BYCOL, BYROW, and MAKEARRAY), and REDUCE.\nTo use FILTER, MAP, and reduce, we will need convenience functions such as"
  },
  {
    "objectID": "06-lambdas-and-let-ii.html#exercises",
    "href": "06-lambdas-and-let-ii.html#exercises",
    "title": "6  LET, LAMBDA, and dynamic arrays",
    "section": "6.2 Exercises",
    "text": "6.2 Exercises\n\n6.2.1 Utility functions\nWe have discussed\nRecall that FILTER does not take the same sort of arguments as e.g. MAP. Its second argument is an array of truth values, not a LAMBDA function. That is OK, but it’s inconsistent with most ofther functions of dynamic arrays. Make a function\n\nFILTER_(array; lambda) Returns the array consisting of elements from array where lambda(x) is TRUE.\nTAKEWHILE(array; lambda) Takes elements from array until the LAMBDA function lambda returns false.\nMAPWHILE(array;mapper;predicate) Maps mapper onto array untile the predicate function returns FALSE.\nFILTERBY(out;filter_array;lambda) Returns the array consisting of elements from out where lambda(x) evaluates to TRUE.\nENUMERATE(array) Takes a one-dimensional array (a column) merges it with SEQUENCE(R), yielding a two-dimensional array."
  },
  {
    "objectID": "06-lambdas-and-let-ii.html#recommended-resources",
    "href": "06-lambdas-and-let-ii.html#recommended-resources",
    "title": "6  LET, LAMBDA, and dynamic arrays",
    "section": "6.3 Recommended resources",
    "text": "6.3 Recommended resources"
  },
  {
    "objectID": "07-power-query-i.html#curriculum",
    "href": "07-power-query-i.html#curriculum",
    "title": "7  Power query (i)",
    "section": "7.1 Curriculum",
    "text": "7.1 Curriculum"
  },
  {
    "objectID": "07-power-query-i.html#exercises",
    "href": "07-power-query-i.html#exercises",
    "title": "7  Power query (i)",
    "section": "7.2 Exercises",
    "text": "7.2 Exercises"
  },
  {
    "objectID": "07-power-query-i.html#recommended-resources",
    "href": "07-power-query-i.html#recommended-resources",
    "title": "7  Power query (i)",
    "section": "7.3 Recommended resources",
    "text": "7.3 Recommended resources"
  },
  {
    "objectID": "08-power-query-ii.html#curriculum",
    "href": "08-power-query-ii.html#curriculum",
    "title": "8  Power query (ii)",
    "section": "8.1 Curriculum",
    "text": "8.1 Curriculum"
  },
  {
    "objectID": "08-power-query-ii.html#exercises",
    "href": "08-power-query-ii.html#exercises",
    "title": "8  Power query (ii)",
    "section": "8.2 Exercises",
    "text": "8.2 Exercises"
  },
  {
    "objectID": "08-power-query-ii.html#recommended-resources",
    "href": "08-power-query-ii.html#recommended-resources",
    "title": "8  Power query (ii)",
    "section": "8.3 Recommended resources",
    "text": "8.3 Recommended resources"
  },
  {
    "objectID": "09-power-pivot-and-dax.html#curriculum",
    "href": "09-power-pivot-and-dax.html#curriculum",
    "title": "9  Power pivot and DAX",
    "section": "9.1 Curriculum",
    "text": "9.1 Curriculum"
  },
  {
    "objectID": "09-power-pivot-and-dax.html#exercises",
    "href": "09-power-pivot-and-dax.html#exercises",
    "title": "9  Power pivot and DAX",
    "section": "9.2 Exercises",
    "text": "9.2 Exercises"
  },
  {
    "objectID": "09-power-pivot-and-dax.html#recommended-resources",
    "href": "09-power-pivot-and-dax.html#recommended-resources",
    "title": "9  Power pivot and DAX",
    "section": "9.3 Recommended resources",
    "text": "9.3 Recommended resources"
  },
  {
    "objectID": "10-typescript-i.html#curriculum",
    "href": "10-typescript-i.html#curriculum",
    "title": "10  Typescript (i)",
    "section": "10.1 Curriculum",
    "text": "10.1 Curriculum\n\nPrimitive JavaScript values. A list can be found here.\n\nUndefined and Null.\nCore primitives: Boolean, Number, and String.\nSpecialized: BigInt and Symbol.\n\nArrays: Unnamed collection of objects.\nFunctions: Takes input vales and does something with them."
  },
  {
    "objectID": "10-typescript-i.html#exercises",
    "href": "10-typescript-i.html#exercises",
    "title": "10  Typescript (i)",
    "section": "10.2 Exercises",
    "text": "10.2 Exercises"
  },
  {
    "objectID": "10-typescript-i.html#recommended-resources",
    "href": "10-typescript-i.html#recommended-resources",
    "title": "10  Typescript (i)",
    "section": "10.3 Recommended resources",
    "text": "10.3 Recommended resources"
  },
  {
    "objectID": "11-typescript-ii.html#curriculum",
    "href": "11-typescript-ii.html#curriculum",
    "title": "11  Typescript (ii)",
    "section": "11.1 Curriculum",
    "text": "11.1 Curriculum"
  },
  {
    "objectID": "11-typescript-ii.html#exercises",
    "href": "11-typescript-ii.html#exercises",
    "title": "11  Typescript (ii)",
    "section": "11.2 Exercises",
    "text": "11.2 Exercises"
  },
  {
    "objectID": "11-typescript-ii.html#recommended-resources",
    "href": "11-typescript-ii.html#recommended-resources",
    "title": "11  Typescript (ii)",
    "section": "11.3 Recommended resources",
    "text": "11.3 Recommended resources"
  },
  {
    "objectID": "12-typescript-iii.html#curriculum",
    "href": "12-typescript-iii.html#curriculum",
    "title": "12  Typescript (iii)",
    "section": "12.1 Curriculum",
    "text": "12.1 Curriculum"
  },
  {
    "objectID": "12-typescript-iii.html#exercises",
    "href": "12-typescript-iii.html#exercises",
    "title": "12  Typescript (iii)",
    "section": "12.2 Exercises",
    "text": "12.2 Exercises"
  },
  {
    "objectID": "12-typescript-iii.html#recommended-resources",
    "href": "12-typescript-iii.html#recommended-resources",
    "title": "12  Typescript (iii)",
    "section": "12.3 Recommended resources",
    "text": "12.3 Recommended resources"
  },
  {
    "objectID": "13-typescript-iv.html#curriculum",
    "href": "13-typescript-iv.html#curriculum",
    "title": "13  Typescript (iv)",
    "section": "13.1 Curriculum",
    "text": "13.1 Curriculum"
  },
  {
    "objectID": "13-typescript-iv.html#exercises",
    "href": "13-typescript-iv.html#exercises",
    "title": "13  Typescript (iv)",
    "section": "13.2 Exercises",
    "text": "13.2 Exercises"
  },
  {
    "objectID": "13-typescript-iv.html#recommended-resources",
    "href": "13-typescript-iv.html#recommended-resources",
    "title": "13  Typescript (iv)",
    "section": "13.3 Recommended resources",
    "text": "13.3 Recommended resources"
  },
  {
    "objectID": "14-typescript-excel.html#curriculum",
    "href": "14-typescript-excel.html#curriculum",
    "title": "14  TypeScript in Excel",
    "section": "14.1 Curriculum",
    "text": "14.1 Curriculum"
  },
  {
    "objectID": "14-typescript-excel.html#exercises",
    "href": "14-typescript-excel.html#exercises",
    "title": "14  TypeScript in Excel",
    "section": "14.2 Exercises",
    "text": "14.2 Exercises"
  },
  {
    "objectID": "14-typescript-excel.html#solutions-to-exercises",
    "href": "14-typescript-excel.html#solutions-to-exercises",
    "title": "14  TypeScript in Excel",
    "section": "14.3 Solutions to exercises",
    "text": "14.3 Solutions to exercises"
  },
  {
    "objectID": "14-typescript-excel.html#recommended-resources",
    "href": "14-typescript-excel.html#recommended-resources",
    "title": "14  TypeScript in Excel",
    "section": "14.4 Recommended resources",
    "text": "14.4 Recommended resources"
  }
]